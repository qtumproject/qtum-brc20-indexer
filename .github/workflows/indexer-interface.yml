# This workflow will build and push a new container image to Alibaba Cloud Container Registry (ACR),
# and then will deploy it to Alibaba Cloud Container Service for Kubernetes (ACK), when a release is created.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ACR repository to store your container images.
#    You can use ACR EE instance for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/142168.htm
#
# 2. Create an ACK cluster to run your containerized application.
#    You can use ACK Pro cluster for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/95108.htm
#
# 3. Store your AccessKey pair in GitHub Actions secrets named `ACCESS_KEY_ID` and `ACCESS_KEY_SECRET`.
#    For instructions on setting up secrets see: https://developer.github.com/actions/managing-workflows/storing-secrets/
#
# 4. Change the values for the REGION_ID, REGISTRY, NAMESPACE, IMAGE, ACK_CLUSTER_ID, and ACK_DEPLOYMENT_NAME.
#

name: indexer-interface-test

on:
  workflow_dispatch:



# Environment variables available to all jobs and steps in this workflow.
env:
  REGION_ID: cn-hongkong
  REGISTRY: web3-container-registry.cn-hongkong.cr.aliyuncs.com
  INSTANCE_ID: cri-y55va3ylv9sgiud8
  NAMESPACE: foxwallet
  #Target container in resource
  # github.sha 即commit id，唯一标识Git仓库中的每个提交
  SHA: ${{ github.sha }}
  ACK_CLUSTER_ID: c8220db8872f844349fc3b621f7eabc00

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    env:
      TZ: Asia/Shanghai
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup GO env
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true
          cache-dependency-path: ./go.sum

      - name: Setup TAG env
        run: |
          echo "TAG=$(date '+%Y%m%d%H%M%S')-${SHA:0:7}" >> "$GITHUB_ENV"

      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: "${{ env.REGISTRY }}"
          region-id: "${{ env.REGION_ID }}"
          access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
          access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
          instance-id: "${{ env.INSTANCE_ID }}"

      - name: Build and push image to ACR
        run: |
          sudo mkdir -p /etc/docker
          sudo tee /etc/docker/daemon.json <<-'EOF'
          {
            "registry-mirrors": ["https://tybzzoor.mirror.aliyuncs.com"]
          }
          EOF
          sudo systemctl daemon-reload
          sudo systemctl restart docker
          echo "1.3. install kustomize"
  
          FILE=/usr/local/bin/kustomize
          if test -f "$FILE"; then
              echo "$FILE exists."
          else 
              curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
              sudo install kustomize /usr/local/bin/kustomize
              rm kustomize
          fi
          
          cd app/ordinal_indexer/interface && make manifest-test

      - name: Login to ACK
        uses: aliyun/ack-set-context@v1
        with:
          access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
          access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
          cluster-id: "${{ secrets.CLUSTER_ID }}"

      - name: Deploy image to ACK
        run: |
          dir=$(ls -l ./artifact/argocd/foxwallet/services/ |awk '/^d/ {print $NF}')
          for i in $dir
          do
              kubectl apply -f ./artifact/argocd/foxwallet/services/$i/k8s.yaml --namespace=$NAMESPACE
          done
          kubectl get services -o wide --namespace=$NAMESPACE

      - name: build failure notification
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
             -d '{"msg_type":"text","content":{"text":"workflow run failed..","repositoryName":"${{github.repository}}","branchName":"${{github.ref}}"}}' \
             ${{secrets.FOXWALLET_MONITOR_HOOK_URL}}
      - name: build success notification
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
             -d '{"msg_type":"text","content":{"text":"workflow run succeeded!","repositoryName":"${{github.repository}}","branchName":"${{github.ref}}"}}' \
             ${{secrets.FOXWALLET_MONITOR_HOOK_URL}}
